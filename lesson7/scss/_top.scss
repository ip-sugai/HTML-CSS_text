@use './mixins' as m;


/* ----.headerのスタイルを設定---- */
.header {
  position: fixed;
  // 上と左にピッタリ　念のため
  top: 0;
  left: 0;
  width: 100%;
  padding: 10px;
  background: rgba(255, 230, 230, 0.9);
  // navはheaderの子要素になるから、positionfixedをかけても必ず上に来る
  // 兄弟要素ならz-indexもかかわってくるけど。
  z-index: 200;
}

.header-logo-menu {
  display: flex; //ロゴとメニューを横に並べる（子要素logo-area nav PCの方も）
  flex-direction: row; //初期値なので不要
  justify-content: space-between; //左右余白なし
}

/* ----.headerのスタイルを設定---- */


/* ----ロゴの設定---- */
.logo-area {
  width: 200px;
  margin: 0; //divはmargin paddingが最初から0だから別に要らない
  text-align: left; //これも謎
}

/* ----ハンバーガーメニューの設定---- */
.gnav-toggle {
  // あんまりいらなさそう
  position: relative;
  // 内余白に12px追加
  margin-top: 12px;
}

// チェックボックス
.gnav-hidden {
  display: none;
}

// 三本線ボタン
#gnav-open {
  display: inline-block; //labelはインラインだから幅と高さを指定できるように
  width: 33px;
  height: 22px;
  //x-middleになる
  // spanタグは3本線を実装するために使う　上の棒をspanで作り、2本目と3本目をbefore とafter ができる。spantagにposition relativeにすると全員浮いて重なる。で、positionを使うとtop bottomとかが使えるようになるからそれでずらす
  vertical-align: middle; 
  // 教科書はspanに書いているが、カーソル変更の適用範囲はlabel全体なのでこっちに書く
  cursor: pointer;

  // 要素で線を入れたことで、細かい動きをanimetionでしていできるようになった
  // rotateで傾けたりすると×にできる
  // beforeをrotate:.125turn(45度),afterをbottom8px、rotate-.125turn(逆に45度)する、チェック入ったときに位置をずらすようにすればいい spanのrgbaを0にすればいい
  //gnav-openの子要素　いちいちgnav-open spanってかかなくてもよくなった
  span,
  span::before,
  span::after {
    content: "";
    //spanの親はlabelだが、positionを持っていない。toggleを親にする。でも別にgnav-openでも良かったのでは。。。
    position: absolute;
    height: 3px;
    width: 25px;
    border-radius: 3px;
    background: #555;
    display: block; //positionを付けると勝手にblock要素になるのでいらない
  }

  span::before {
    bottom: -8px;
  }

  span::after {
    bottom: -16px;
  }

}


#gnav-close {
  position: fixed; //ウィンドウの親を基準にする
  background: #000;
  /* top 0,left 0,right 0,bottom 0　という意味。fixedの場合、ウィンドウと同じ大きさに伸びるというショートハンドプロパティ */
  inset: 0;
  // gnav-contentが300なので、それより下げたということ
  z-index: 90;
  opacity: 0; //透明にする
  display: none; //上にかぶさっているものをなきものにする
  // 全てのプロパティを対象にアニメーションする。上のopacityも取り消されるので透明ではなくなるのだが、displayに関してはtransitionでどうにもできない。ただの表示形式なので、時間をかけてフワッと変わったりはしない。よって薄黒い領域はパッと出てくる
  transition: all 0.3s ease-in-out;
}

//gnav-contentはsp用縦型ナビを囲むdiv
.gnav-content {
  // 画面の高さが低くナビゲーションがはみ出す時のみスクロールバーを出す
  overflow: auto;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 300;
  width: 70%;
  max-width: 300px;
  height: 100%;
  background: rgba(0, 0, 0, .8);
  transition: .3s ease-in-out;
  //画面外側に出しておく
  transform: translateX(-105%);
}

// チェックが入ったらgnav-close（薄い黒）を画面に出す
#gnav-input:checked ~ #gnav-close {
  display: block;
  // ↑でgnav-closeは0にしていた
  opacity: .5;
}

// gnav-contentはclass!!!
#gnav-input:checked ~ .gnav-content {
  transform: translateX(0%);
  box-shadow: 6px  0 25px rgba(0,0,0,.15);
}

// メニューの文字
.gnav-menu {
  display: flex;
  flex-direction: column;
  // 交差軸方向（今は横方向）中央寄せ
  align-items: center;
  padding-top: 50px;
  text-transform: uppercase;
}

.gnav-item {
  border-bottom: 2px dotted blue;
  margin: 10px;
  padding-bottom: 20px;

  a {
  color: #fff;
  font-size: 12px;
  display: block;
  width: 200px;
  text-align: center;
  
    &::first-line {
      font-size: 16px;
      font-weight: bold;
    }
  }
}


@include m.mq {
  .logo-area {
    width: 250px;
  }
}

@include m.mq {
  .gnav-menu {
    // メニューの文字を横並び
    flex-direction: row;
    padding-top: 15px;
    margin: 0;
  }

  .gnav-item {
    border-bottom: none;
    margin: 0;
    padding-bottom: 0;

    a {
      color: #333;
      width: 120px;

      &:hover {
        color: #85a7cc;
      }
    }
  }
}

// sectionのスタイル
.mv-area {
  width: 100vw;
  height: 100vh;
  background-image: url(../img/hero.jpg);
  background-size: cover;
  background-position: center center;
  // 中の子要素を横ならべに
  display: flex;
  // 水平方向を中央
  justify-content: center;
  // 垂直方向に中央
  align-items: center;
  // 縦方向の並び
  flex-direction: column;
}

.mv-title {
  color: #fff;
  text-shadow: 0 0 3px #333;
}

@include m.mq {
  // 親はbody
  .mv-area {
    width: 100%;
    height: 600px;
  }

  .mv-title {
    margin-top: 90px;
  }
}

// sectionのスタイル
.info-area {
  background-color: #85a7cc;
}

.info-txt {
  color: #fff;
}

@include m.mq {
.info-content {
  display: flex;
  flex-direction: row-reverse;
  align-items: center;
}
.info-txt {
  flex: 1;
  margin-left: 30px;
}
.info-area img {
  flex: 1;
}
}