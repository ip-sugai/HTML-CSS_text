//スマホ版の時、メニュー名をクリックしてサイト内移動をしたあと、ページがひっこまない。JSで仕掛けをつくるのがいい。

@use './mixins' as m;
@use './variables' as *;

/* ----.headerのスタイルを設定---- */
.header {
  position: fixed;
  // 上と左にピッタリ　念のため
  top: 0;
  left: 0;
  width: 100%;
  padding: 10px;
  background: rgba(255, 230, 230, 0.9);
  // navはheaderの子要素になるから、positionfixedをかけても必ず上に来る
  // 兄弟要素ならz-indexもかかわってくるけど。
  z-index: 200;
}

.header-logo-menu {
  display: flex; //ロゴとメニューを横に並べる（子要素logo-area nav PCの方も）
  flex-direction: row; //初期値なので不要
  justify-content: space-between; //左右余白なし
}

/* ----.headerのスタイルを設定---- */


/* ----ロゴの設定---- */
.logo-area {
  width: 200px;
  margin: 0; //divはmargin paddingが最初から0だから別に要らない
  text-align: left; //これも謎
}

/* ----ハンバーガーメニューの設定---- */
.gnav-toggle {
  // あんまりいらなさそう
  position: relative;
  // 内余白に12px追加
  margin-top: 12px;
}

// チェックボックス
.gnav-hidden {
  display: none;
}

// 三本線ボタン
#gnav-open {
  display: inline-block; //labelはインラインだから幅と高さを指定できるように
  width: 33px;
  height: 22px;
  //x-middleになる
  // spanタグは3本線を実装するために使う　上の棒をspanで作り、2本目と3本目をbefore とafter ができる。spantagにposition relativeにすると全員浮いて重なる。で、positionを使うとtop bottomとかが使えるようになるからそれでずらす
  vertical-align: middle;
  // 教科書はspanに書いているが、カーソル変更の適用範囲はlabel全体なのでこっちに書く
  cursor: pointer;

  // 要素で線を入れたことで、細かい動きをanimetionでしていできるようになった
  // rotateで傾けたりすると×にできる
  // beforeをrotate:.125turn(45度),afterをbottom8px、rotate-.125turn(逆に45度)する、チェック入ったときに位置をずらすようにすればいい spanのrgbaを0にすればいい
  //gnav-openの子要素　いちいちgnav-open spanってかかなくてもよくなった
  span,
  span::before,
  span::after {
    content: "";
    //spanの親はlabelだが、positionを持っていない。toggleを親にする。でも別にgnav-openでも良かったのでは。。。
    position: absolute;
    height: 3px;
    width: 25px;
    border-radius: 3px;
    background: #555;
    display: block; //positionを付けると勝手にblock要素になるのでいらない
  }

  span::before {
    bottom: -8px;
  }

  span::after {
    bottom: -16px;
  }

}


#gnav-close {
  position: fixed; //ウィンドウの親を基準にする
  background: #000;
  /* top 0,left 0,right 0,bottom 0　という意味。fixedの場合、ウィンドウと同じ大きさに伸びるというショートハンドプロパティ */
  // inset: 0;
  // gnav-contentが300なので、それより下げたということ
  // z-index: 90;
  opacity: 0; //透明にする
  // display: none; //上にかぶさっているものをなきものにする
  // 全てのプロパティを対象にアニメーションする。上のopacityも取り消されるので透明ではなくなるのだが、displayに関してはtransitionでどうにもできない。ただの表示形式なので、時間をかけてフワッと変わったりはしない。よって薄黒い領域はパッと出てくる
  width: 0;
  height: 0;
  top: 0;
  left: 0;
  z-index: -1;
  transition: opacity 1.5s ease-in-out;
}

//gnav-contentはsp用縦型ナビを囲むdiv
.gnav-content {
  // 画面の高さが低くナビゲーションがはみ出す時のみスクロールバーを出す
  overflow: auto;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 300;
  // スクリーン幅に対して7割
  width: 70%;
  // 最大でも300px
  max-width: 300px;
  // 画面の高さに合わせる（左から出てきたとき）
  height: 100%;
  background: rgba(0, 0, 0, .8);
  transition: .3s ease-in-out;
  //画面外側に出しておく
  transform: translateX(-105%);
}

// チェックが入ったらgnav-close（薄い黒）を画面に出す
#gnav-input:checked~#gnav-close {
  // display: block;

  // ↑でgnav-closeはopacity:0にしていた
  opacity: .5;
  width: 100%;
  height: 100%;
  // z-index: 90;
}

// gnav-contentはclass!!!
#gnav-input:checked~.gnav-content {
  transform: translateX(0%);
  box-shadow: 6px 0 25px rgba(0, 0, 0, .15);
}

// メニューの文字
.gnav-menu {
  // PCの段階で横並びにするから、spでいったん横並びで書いたものをさらに縦にする。するとpcの方でdirectionをかけるだけで横並びにできる
  display: flex;
  flex-direction: column;
  // 交差軸方向（今は横方向）の中央寄せ　初期値はstretchなので、これを指定せず
  align-items: center;
  padding-top: 50px;
  // 英語を大文字化する
  text-transform: uppercase;
}

.gnav-item {
  border-bottom: 2px dotted blue;
  margin: 10px;
  padding-bottom: 20px;

  a {
    color: #fff;
    font-size: 12px;
    // 親要素と同じblockにして、クリック範囲を統一する
    display: block;
    width: 200px;
    text-align: center;

    &::first-line {
      font-size: 16px;
      font-weight: bold;
    }
  }
}


@include m.mq {
  .logo-area {
    width: 250px;
  }
}

@include m.mq {
  .gnav-menu {
    // メニューの文字を横並び
    flex-direction: row;
    padding-top: 15px;
    margin: 0;
  }

  .gnav-item {
    border-bottom: none;
    margin: 0;
    padding-bottom: 0;

    a {
      color: #333;
      width: 120px;

      &:hover {
        color: $color-primary;
      }
    }
  }
}

// sectionのスタイル
.mv-area {
  width: 100vw;
  height: 100vh;
  background-image: url(../img/hero.jpg);
  background-size: cover;
  background-position: center center;
  // 中の子要素を横ならべに
  display: flex;
  // 水平方向を中央
  justify-content: center;
  // 垂直方向に中央
  align-items: center;
  // 縦方向の並び
  flex-direction: column;
}

.mv-title {
  color: #fff;
  text-shadow: 0 0 3px #333;
}

@include m.mq {

  // 親はbody
  .mv-area {
    // 100vwのままだとスクロールバーを含めたmvサイズになってしまうので変更
    width: 100%;
    height: 600px;
  }

  .mv-title {
    margin-top: 90px;
  }
}

// sectionのスタイル
.info-area {
  background-color: $color-primary;
}

.info-txt {
  color: #fff;
}

@include m.mq {
  .info-content {
    display: flex;
    flex-direction: row-reverse;
    align-items: center;
  }

  .info-txt {
    flex: 1; //=flex-grow:1 全部同じ比率で伸びる
    margin-left: 30px;
  }

  .info-area img {
    // flex: 1;
    width: 50%;
  }
}

//サービスエリア
.service-area {
  background-color: #fff;
}

.service-content {
  display: flex;
  //初期値はnowrap
  flex-wrap: wrap;
}

.service-item {
  // flex 0 1 40% またはflex-basis 40%と同義
  flex: 40%;
  text-align: center;
  padding: 20px 20px 0;
  margin: 5px;
  border: 3px solid $color-primary-dark;
  border-radius: 10px;
}

@include m.mq {
  .service-content {
    flex-wrap: nowrap;
    max-width: 1200px;
    // コンテンツを中央揃え
    margin: 0 auto;
  }

  .service-item {
    flex: 1;
  }
}


// プラン
.plan-area {
  background-color: #f0f0f0;
}

.plan-content {
  display: flex;
  flex-direction: column;
}

.plan-item {
  background-color: #fff;
  margin-bottom: 30px;
  box-shadow: inset 1px 1px 3px #aaa;
}

// テキストのエリア。上下の余白なし
.plan-info {
  padding: 0px 15px 15px;
}

.plan-title {
  text-align: center;
  padding-bottom: 10px;
  border-bottom: 2px solid $color-primary-dark;
}

.plan-price {
  text-align: center;
  padding: 10px;
  border: 2px solid $color-primary-dark;
}

.plan-list li::before {
  content: '';
  background: url(../img/list-marker.svg) no-repeat;
  display: inline-block;
  width: 16px;
  height: 16px;
  // xの文字の真ん中にする
  vertical-align: middle;

  // 文字との間隔10px、bottomに3px入れて少し上にあげている
  margin: 0 10px 3px;
}

@include m.mq {
  .plan-content {
    flex-direction: row;
  }

  // がたがたの幅が均等にそろう
  .plan-item {
    flex: 1;
    margin-top: 0; //特に意味なし
    margin-left: 15px;
    margin-right: 15px;
  }
}

//アクセス
.access-area {
  padding-bottom: 0;
}

.access-area img {
  display: block;
  max-width: 280px;
  max-height: 280px 
  border-radius 50%;
  overflow: hidden;
  margin: 10px auto 30px;
}

// 親要素をrelative
.access-maparea {
  position: relative;

  // 高さも親要素が基準だが、親が高さ持っていない場合は影響されない
  // 上側の内余白は幅と同じにしている
  // padding-topの代わりにascpect-ratioプロパティで1/1とか16/9とかすると簡単に画像の比率を設定できる
  padding-top: 100%;
  background-color: yellow;
}

// 子要素をabsolute
.access-map {
  position: absolute;

  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

@include m.mq {
  .access-content {
    display: flex;
    flex-direction: row; //書かなくてもOK　もともとrow
    align-items: center; //縦方向中央寄せ

    // padding-left: 150px;
    //左寄りになっているコンテンツを目分量で左に寄せてるが、画面サイズを変えると文字と画像の間がかなり狭まって気になる。paddingを左右で均等に開けるか、パーセンテージで決めるといいかも
    padding-left: 75px;
    padding-right: 75px;

    // padding-right: 10%;
  }

  .access-maparea {
    padding-top: 30%;
    //ascpect-ratio 3/1
  }
}

//ページトップ
#pagetop {
  text-align: right;
  padding: 15px;
  background-color: #f0f0f0;

  a::after {
    content: "";
    background: url(../img/list-marker.svg);
    width: 16px;
    height: 16px;

    // これがないとインライン要素だから画面上に表示されない
    display: inline-block;

    //少し下におかれる
    vertical-align: middle;

    //少し上にあげる
    margin: 0 0 3px;

    // 矢印方向を上に向かせる
    transform: rotate(-90deg);
  }

}

//footer全体のスタイル
.foot-area {
  color: #fff;
  text-align: center;
  padding-top: 40px;
  background-color: #596680;
}

.foot-logo {
  margin: 0 auto 20px;
}

.text-phone,
.text-phone a {
  color: #fff;
  font-size: 24px;
  font-weight: 700;
  letter-spacing: 0.1em;
  margin-bottom: 40px;
}

// 本当は以下のようにaにはfffだけ適用すればいい。
// .txt-phone a {
//   color: #fff;
// }

.foot-area_copy {
  color: #ccc;
  font-size: 12px;
  display: inline-block;
  width: 100%;
  padding: 10px;
  background-color: #333;
}

@include m.mq {
  //768以上の時は
  //href属性がtel:で始まるa要素に対して、
  //イベントを何も起こさない（パソコン版では電話アプリにつながない）
  //キャレットは～で始まる、という意味。
  a[href^="tel:"] {
    pointer-events: none;
  }
}